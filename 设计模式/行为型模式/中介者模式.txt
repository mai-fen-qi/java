中介者模式也叫调停者模式

模式的定义与特点
中介者（Mediator）模式的定义：定义一个中介对象来封装一系列对象之间的交互，
使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。
它是迪米特法则的典型应用。

中介者模式是一种对象行为型模式，其主要优点如下。
降低了对象之间的耦合性，使得对象易于独立地被复用。
将对象间的一对多关联转变为一对一的关联，提高系统的灵活性，
使得系统易于维护和扩展。

其主要缺点是：当同事类太多时，中介者的职责将很大，它会变得复杂而庞大，
以至于系统难以维护。
模式的结构与实现
中介者模式实现的关键是找出“中介者”，下面对它的结构和实现进行分析。
1. 模式的结构
中介者模式包含以下主要角色。
抽象中介者（Mediator）角色：它是中介者的接口，
提供了同事对象注册与转发同事对象信息的抽象方法。
具体中介者（ConcreteMediator）角色：实现中介者接口，定义一个 List 来管理同事对象，
协调各个同事角色之间的交互关系，因此它依赖于同事角色。
抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，
提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。
具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，
当需要与其他同事对象交互时，
由中介者对象负责后续的交互。

模式的应用实例
【例1】用中介者模式编写一个“韶关房地产交流平台”程序。

说明：韶关房地产交流平台是“房地产中介公司”提供给“卖方客户”与“买方客户”
进行信息交流的平台，比较适合用中介者模式来实现。

首先，定义一个中介公司（Medium）接口，它是抽象中介者，
它包含了客户注册方法 register(Customer member) 和
信息转发方法 relay(String from,String ad)；
再定义一个韶关房地产中介（EstateMedium）公司，它是具体中介者类，
它包含了保存客户信息的 List 对象，并实现了中介公司中的抽象方法。

然后，定义一个客户（Qistomer）类，它是抽象同事类，其中包含了中介者的对象，
和发送信息的 send(String ad) 方法与接收信息的 receive(String from，Stringad)
 方法的接口，由于本程序是窗体程序，所以本类继承 JPmme 类，
 并实现动作事件的处理方法 actionPerformed(ActionEvent e)。

最后，定义卖方（Seller）类和买方（Buyer）类，它们是具体同事类，
是客户（Customer）类的子类，它们实现了父类中的抽象方法，
通过中介者类进行信息交流
模式的应用场景
前面分析了中介者模式的结构与特点，下面分析其以下应用场景。
当对象之间存在复杂的网状结构关系而导致依赖关系混乱且难以复用时。
当想创建一个运行于多个类之间的对象，又不想生成新的子类时。
模式的扩展
在实际开发中，通常采用以下两种方法来简化中介者模式，使开发变得更简单。
不定义中介者接口，把具体中介者对象实现成为单例。
同事对象不持有中介者，而是在需要的时f矣直接获取中介者对象并调用。